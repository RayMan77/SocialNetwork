@using Castle.Core.Internal
@using Microsoft.AspNet.Identity
@using Utils.Enums
@model PL.Models.OpenPostModel
@{
	ViewBag.Title = "Reactions";
	Layout = "~/Views/Shared/_Layout.cshtml";
}

<div style="border: black 1px solid">
	<h3 style="margin: 10px">
		@Html.ActionLink(Model.Post.Sender.FullName, "UserPage", "Page", new { userId = Model.Post.Sender.ID }, null)

		@if (Model.Post.Group != null)
		{
			<span> sent to  </span>
			@Html.ActionLink(Model.Post.Group.Name, "GroupPage", "Page", new { groupId = Model.Post.Group.ID }, null)
		}
	</h3>

	<p style="margin: 10px; width:1100px; word-wrap:break-word; display:inline-block;"> @Model.Post.Message</p>
	<div style="margin: 10px">

		Sent at : @Model.Post.Time
	</div>
</div>



<div class="row">
	<div class="col-md-4">
		@using (Html.BeginForm("CreateComment", "Post", FormMethod.Post))
		{
			@Html.HiddenFor(m => m.PostId)
			@Html.HiddenFor(m => m.BackView)
			@Html.TextAreaFor(m => m.NewComment.CommentMessage, new {@class = "form-control", style = "display:inline-block"})
			<input type="submit" name="SendComment" value="Send" style="display: inline-block; margin-top: -66px"class="btn btn-primary"/>
		}


	</div>
	<div class="col-md-4">
		@using (Html.BeginForm("CreateReaction", "Post", FormMethod.Post))
		{
			@Html.HiddenFor(m => m.PostId)
			@Html.HiddenFor(m => m.BackView)
			<div style="display: inline-block">
				@Html.EnumDropDownListFor(x => x.UserReaction, "No Reaction", new
				{
					@class = "form-control small", style = "width:150px;display:inline-block"
				})
				<input type="submit" name="ReactOnPost"
						value="React" style="display: inline-block;" class="btn btn-primary"/>
			</div>
		}
	</div>
</div>
<div>


	<div style="border: black solid 1px;">
		@if (Model.Reactions.IsNullOrEmpty())
		{
			<p>Be the first to react!</p>
		}
		else
		{
			foreach (var i in Enum.GetValues(typeof(ReactionEnum)))
			{
				var reactCount = Model.Reactions.Count(r => r.UserReaction.Equals(i));
				if (reactCount > 0)
				{
					<div style="border: 1px solid gray; float: left; padding: 5px; background-color: #d3d3d3">
						@i.ToString() : @reactCount
					</div>
				}
			}
		}


	</div>
	<div style="border: black 1px solid; clear: both">
		@foreach (var comment in Model.Comments)
		{
			<div style="border: black 1px solid; clear: both">
				<div class="row">
					<div class="col-md-7">
						@Html.ActionLink(comment.Sender.FullName, "UserPage", "Page", new { userId = comment.Sender.ID }, null)

						at @comment.Time
					</div>
					<div class="col-md-3">
						@if (comment.Sender.ID == int.Parse(User.Identity.GetUserId()))
						{

							@Html.ActionLink("Delete", "DeleteComment", "Post", new { id = comment.ID, viewName = Model.BackView }, null)
							@Html.ActionLink("Edit", "EditComment", "Post", new { id = comment.ID, viewName = Model.BackView }, null)
						}
					</div>

				</div>
				<p style="margin: 10px; width: 1100px; word-wrap: break-word; display: inline-block;">
					@comment.CommentMessage
				</p>
			</div>
		}


	</div>

</div>

<div style="display: inline-block">
	@if (Model.Page > 1)
	{
		<div style="display: inline-block">
			@Html.ActionLink("Previous Page", "Reactions", "Post",
				new {id = Model.PostId, backView = Model.BackView, page = Model.Page - 1}, new {@class = "btn btn-info"})
		</div>
	}
	<div style="display: inline-block">

		@Html.ActionLink("Next Page", "Reactions", "Post",
			new {id = Model.PostId, backView = Model.BackView, page = Model.Page + 1}, new {@class = "btn btn-info"})
	</div>
</div>
<div>
	@switch (Model.BackView)
	{
		case "GroupPage":
			@Html.ActionLink("Back", Model.BackView, "Page", new {groupId = Model.Post.Group.ID}, new {@class = "btn btn-default"})
			break;
		case "UserPage":
			@Html.ActionLink("Back", Model.BackView, "Page", new {userId = Model.Post.Sender.ID}, new {@class = "btn btn-default"})
			break;
		default:
			@Html.ActionLink("Back", Model.BackView, "Page", null, new {@class = "btn btn-default"})
			break;
	}
</div>